
from code_to_embedding import get_embedding_from_input
from code_processor import code_to_function
import numpy as np

def create_dataset(codes_list_w_functions, file_names, hashes, cwes, cwe1, cwe2):
    pos_x = []
    neg_x = []
    pos_y = []
    neg_y = []
    for i, cwe in enumerate(list(cwes)):
        if cwe==cwe1:
            #print(hashes[i])
            for j, file_name in enumerate(file_names):
                file_name = str(file_name).split('.')[0]
                #print(file_name)
                if file_name==hashes[i]:
                    pos_x.append(codes_list_w_functions[j])
                    pos_y.append(1)
                    break
        elif cwe==cwe2:
            #print(hashes[i])
            for j, file_name in enumerate(file_names):
                file_name = str(file_name).split('.')[0]
                #print(file_name)
                if file_name==hashes[i]:
                    neg_x.append(codes_list_w_functions[j])
                    neg_y.append(0)
                    break
    return pos_x, neg_x, pos_y, neg_y

def get_embedding_for_dataset(model, tokenizer, pos_x, neg_x):
    pos_embeddings = []
    neg_embeddings = []
    for i, code in enumerate(pos_x):
        for j, function in enumerate(code):
            print(function)
            emb = get_embedding_from_input(model, tokenizer, function)
            pos_embeddings.append(emb.detach().numpy())

    for i, code in enumerate(neg_x):
        for j, function in enumerate(code):
            print(function)
            emb = get_embedding_from_input(model, tokenizer, function)
            neg_embeddings.append(emb.detach().numpy())

    return np.asarray(pos_embeddings), np.asarray(neg_embeddings)




