import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import seaborn as sns
from sklearn.manifold import TSNE
from sklearn.decomposition import PCA


def twoD_plotter(embedding, y, title="PoC vs non-PoC functions T-SNE projection"):
    plt.figure(figsize=(10, 10))
    sns.scatterplot(
        x=embedding[:, 0], y=embedding[:, 1],
        hue=y,
        palette=sns.color_palette("hls", 2),
        legend="full",
        alpha=0.3,
    ).set(title=title)
    plt.show()



def PCA_plotter(embedding, y, title='PoC vs non-PoC functions PCA projection'):
    ax = plt.figure(figsize=(10, 10)).gca(projection='3d')
    ax.scatter(
        xs=embedding[:, 0],
        ys=embedding[:, 1],
        zs=embedding[:, 2],
        c=y,
        cmap='tab10'
    )
    ax.set_xlabel('pca-one')
    ax.set_ylabel('pca-two')
    ax.set_zlabel('pca-three')
    ax.set_title(title)
    plt.show()


def get_PCA_embedding(n_components, embedding):
    PCA_embedding = PCA(n_components=n_components).fit_transform(embedding)
    #print(PCA_embedding.shape)
    return PCA_embedding


def get_tSNE_embedding(n_components, embedding):
    tsne_embedding = TSNE(n_components=n_components, learning_rate='auto', verbose=1).fit_transform(embedding)
    #print(tsne_embedding.shape)
    return tsne_embedding
