import numpy as np
import torch
from code_to_embedding import load_model_tokenizer, get_embedding_from_input
from transformers import LongformerModel, RobertaTokenizer
from litmus_test import train_test_linear_classifier


def encoder_section(input_functions, num_encoders=10):
    embedding_from_encoders = []
    #print(len(input_functions))
    for i in range(len(input_functions)):
        model, tokenizer = load_model_tokenizer()
        embedding = get_embedding_from_input(model, tokenizer, input_functions[i])
        embedding_from_encoders.append(embedding.detach().numpy())
    embedding_from_encoders = np.asarray(embedding_from_encoders)
    embedding_from_encoders = embedding_from_encoders[0:num_encoders, :, 0, :]
    #embedding_from_encoders = np.reshape(embedding_from_encoders, (embedding_from_encoders.shape[0], embedding_from_encoders.shape[2]))
    embedding_from_encoders = np.reshape(embedding_from_encoders, -1)
    embedding_from_encoders = np.pad(embedding_from_encoders, (0, num_encoders*768-embedding_from_encoders.shape[0]))
    #print(embedding_from_encoders)
    #print(embedding_from_encoders.shape)
    #print(embedding_from_encoders)
    return embedding_from_encoders

def custom_model(input_codes, labels, num_encoders):
    embedding_data = []
    for i, code in enumerate(input_codes):
        embedding_from_encoders = encoder_section(code, num_encoders)
        embedding_data.append(embedding_from_encoders)
        #if(i==9): break

    embedding_data = np.asarray(embedding_data)
    print(embedding_data.shape)
    labels = np.asarray(labels)
    print(labels.shape)
    train_test_linear_classifier(embedding_data, labels)
    """
    longformer_model = LongformerModel.from_pretrained("allenai/longformer-base-4096")
    tokenizer = RobertaTokenizer.from_pretrained('roberta-base')
    tokenizer.model_max_length = longformer_model.config.max_position_embeddings
    input_ids = torch.tensor(tokenizer.encode(embedding_from_encoders)).unsqueeze(0)
    output = longformer_model(input_ids)
    print(output)
    """